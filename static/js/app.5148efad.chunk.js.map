{"version":3,"sources":["assets/queries.rq","src/components/Context.tsx","src/components/Settings.tsx","src/components/NavBar.tsx","src/components/Footer.tsx","src/components/Config.tsx","src/components/LinkDescribe.tsx","src/pages/About.tsx","src/pages/homepage.tsx","src/pages/describe.tsx","App.tsx","web-build/register-service-worker.js","webpack:////home/runner/work/bio2rdf-website/bio2rdf-website/App.css?5131","App.css"],"names":["module","exports","Context","React","createContext","useStyles","makeStyles","theme","settingsForm","width","marginTop","spacing","marginBottom","saveButton","textTransform","margin","fullWidth","normalFont","fontSize","smallerFont","alignLeft","textAlign","paperPadding","padding","paperTitle","fontWeight","Settings","classes","useState","solid_webid","search_text","describe_uri","describe_endpoint","metadata_endpoint","open","dialogOpen","sparql_endpoint_autocomplete","metadata_endpoint_autocomplete","search_query_autocomplete","search_query","custom_search_query","state","setState","stateRef","useRef","updateState","useCallback","update","current","useContext","context","setContext","handleAutocompleteSparqlEndpoint","input_text","console","log","target","value","innerText","handleAutocompleteMetadataEndpoint","handleAutocompleteSearchQuery","autocomplete_element","example_search_virtuoso","example_search_graphdb","example_search_default","useEffect","localStorageConfig","localStorage","getItem","configState","JSON","parse","sparql_endpoint","Container","className","onSubmit","event","settings_object","setItem","stringify","handleSubmit","FormControl","style","Typography","variant","FormHelperText","Autocomplete","onChange","onInputChange","id","options","freeSolo","includeInputInList","ListboxProps","renderInput","params","TextField","label","Button","type","color","Snackbar","onClose","reason","autoHideDuration","menuButton","palette","common","white","solidButton","backgroundColor","primary","main","borderRadius","dark","cursor","linkButton","textDecoration","linkLogo","alignItems","display","paperSearch","searchInput","marginLeft","flex","iconButton","NavBar","setOpen","anchorEl","setAnchorEl","history","useHistory","AppBar","title","position","Toolbar","to","Tooltip","Paper","component","preventDefault","push","InputBase","placeholder","inputProps","IconButton","aria-label","onClick","currentTarget","prev","Popper","ClickAwayListener","onClickAway","elevation","href","rel","darkLink","light","whiteLink","footer","Copyright","align","Footer","maxWidth","uriLink","overflowWrap","LinkDescribe","props","prefixRegistry","Config","test","uri","pathname","search","passClass","uriToShorten","prefix","startsWith","replace","shortenUri","link","secondary","About","useTheme","show_info_card","Card","CardHeader","action","name","aria-expanded","subheader","Collapse","in","timeout","unmountOnExit","CardContent","$","require","DataTable","Cytoscape","use","Cola","paperQuery","transform","cardSubtitle","loadSpinner","Homepage","isLoading","sparql_queries","yasgui","get_all_graphs_results","hcls_overview_results","entities_relations_overview_results","graph_data","nodes","edges","cytoscape_elements","repositories_hash","category_pie","displayTableCell","stringToDisplay","fetch","SparqlQueries","then","r","text","split","forEach","query_string","query_summary","query_params","query_no_comments","line","join","trim","Yasgui","defaults","requestConfig","endpoint","document","getElementById","copyEndpointOnNewTab","axios","get","encodeURIComponent","get_all_graphs_query","res","data","results","bindings","catch","error","hcls_overview_query","entities_relations_query","graph_nodes","graph_edges","node_count","edge_count","result_row","subject_count","subjectCount","subject","size","x","y","object_count","objectCount","object","edge_id","predicate","source","graph_nodes_array","Object","keys","map","node_id","graph_edges_array","query","key","addTab","Tab","getDefaults","yasqe","loadSparqlQuery","summary","length","wordBreak","row","graph","dateGenerated","statements","entities","properties","CircularProgress","height","config","layout","Graph","Layouts","euler","renderNode","item","View","Text","substring","lastIndexOf","elements","nodeSpacing","edgeLengthVal","animate","randomize","maxSimulationTime","stylesheet","selector","datatable_text","Describe","describe_results","search_results","requestError","location","useLocation","URLSearchParams","hash","uri_to_describe","describe_query","getDescribeQuery","sparql_results_array","text_to_search","getSearchQuery","search_results_array","searchResult","Grid","container","xs","foundUri","foundLabel","App","createMuiTheme","typography","Provider","basename","exact","path","navigator","window","addEventListener","serviceWorker","register","scope","info","api","content","__esModule","default","i","locals","___CSS_LOADER_API_IMPORT___"],"mappings":"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","file":"static/js/app.5148efad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/queries.f53b524b.rq\";","import React from \"react\";\n\n// TODO: NOT USED anymore, using localStorage now\n// @ts-ignore useless warning about 1 expected argument\nconst Context = React.createContext();\n\nexport default Context;\n\n\n// Default values and structure defined in App.js\n// const Context = React.createContext('https://bio2rdf.org/sparql');\n\n// const Context = React.createContext([{\n//   context: 'https://bio2rdf.org/sparql',\n//   setContext: () => {}\n//   // describe_uri: '',\n//   // solid_webid: '',\n// // }, () => {}]);\n// }]);\n// }, (describe_endpoint: string) => {}]);\n","import React, { Component } from \"react\"; \nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Popper, ClickAwayListener } from \"@material-ui/core\";\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Context from './Context';\nimport { FormControl, TextField, Input, InputLabel, FormHelperText } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles(theme => ({\n  settingsForm: {\n    width: '90%',\n    // textAlign: 'center',\n    '& .MuiFormControl-root': {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    '& .MuiFormHelperText-root': {\n      marginTop: theme.spacing(0),\n      marginBottom: theme.spacing(1),\n    },\n  },\n  saveButton: {\n    textTransform: 'none',\n    margin: theme.spacing(2, 2),\n    // maxWidth: '400px'\n  },\n  fullWidth: {\n    width: '100%',\n  },\n  normalFont: {\n    fontSize: '14px',\n  },\n  smallerFont: {\n    fontSize: '12px',\n  },\n  alignLeft: {\n    textAlign: 'left'\n  },\n  paperPadding: {\n    padding: theme.spacing(1, 1),\n    margin: theme.spacing(1, 1),\n  },\n  marginBottom: {\n    marginBottom: theme.spacing(1),\n  },\n  paperTitle: {\n    fontWeight: 300,\n    marginBottom: theme.spacing(1),\n  }\n}))\n\n// function Alert(props) {\nfunction Alert() {\n  return <MuiAlert elevation={6} variant=\"filled\" />;\n}\n\nexport default function Settings() {\n  const classes = useStyles();\n\n  const [state, setState] = React.useState({\n    solid_webid: '',\n    search_text: '',\n    describe_uri: '',\n    describe_endpoint: '',\n    metadata_endpoint: '',\n    open: false, \n    dialogOpen: false,\n    sparql_endpoint_autocomplete: '',\n    metadata_endpoint_autocomplete: '',\n    search_query_autocomplete: '',\n    search_query: '',\n    custom_search_query: '',\n  });\n\n  // Avoid state conflict when async calls\n  const stateRef = React.useRef(state);\n  const updateState = React.useCallback((update) => {\n    stateRef.current = {...stateRef.current, ...update};\n    setState(stateRef.current);\n  }, [setState]);\n\n  // Get context to edit endpoint URL\n  const [context, setContext]: any = React.useContext(Context);\n\n\n//   constructor(props) {\n//     super(props);\n//     // this.formSparqlEndpoint = React.createRef(); \n//     this.formGraphsOverview = React.createRef(); \n//     this.formGraphUriResolution = React.createRef(); \n//     this.formSearchQuery = React.createRef(); \n//     // this.formOpenapiUrl = React.createRef(); \n//     // this.formComunicaUrl = React.createRef(); \n//     // this.formFilebrowserUrl = React.createRef(); \n//     // this.setState({ sparql_endpoint_autocomplete: this.context.triplestore.sparql_endpoint})\n//  }\n\n  // Close Snackbar\n  function handleClose (event: any, reason: any) {\n    updateState({ open: false});\n  };\n  // function handleDialogClose (event: any, reason: any) {\n  //   updateState({ dialogOpen: false});\n  // };\n\n  // function handleAutocomplete(stateToUpdate: any, searchText: any) {\n  function handleAutocompleteSparqlEndpoint(input_text: any) {\n    // Generate specific state key for this autocomplete\n    console.log(\"Update state \")\n    if (input_text && input_text.target){\n      if (input_text.target.value && input_text.target.value !== 0) {\n        updateState({ sparql_endpoint_autocomplete: input_text.target.value})\n      } else {\n        updateState({ sparql_endpoint_autocomplete: input_text.target.innerText})\n      }\n    }\n  }\n\n  function handleAutocompleteMetadataEndpoint(input_text: any) {\n    // Generate specific state key for this autocomplete\n    console.log(\"Update state \")\n    if (input_text && input_text.target){\n      if (input_text.target.value && input_text.target.value !== 0) {\n        updateState({ sparql_endpoint_autocomplete: input_text.target.value})\n      } else {\n        updateState({ sparql_endpoint_autocomplete: input_text.target.innerText})\n      }\n    }\n  }\n\n  function handleAutocompleteSearchQuery(autocomplete_element: any) {\n    // Generate specific state key for this autocomplete\n    let search_query_autocomplete = '';\n    if (autocomplete_element && autocomplete_element.target){\n      if (autocomplete_element.target.value && autocomplete_element.target.value !== 0) {\n        search_query_autocomplete = autocomplete_element.target.value\n      } else {\n        search_query_autocomplete = autocomplete_element.target.innerText\n      }\n    }\n    let search_query = '';\n    if (search_query_autocomplete === 'Optimized search in Virtuoso') {\n      search_query = example_search_virtuoso;\n    } else if (search_query_autocomplete === 'Optimized search in Ontotext GraphDB') {\n      search_query = example_search_graphdb;\n    } else if (search_query_autocomplete === 'Define a custom search query') {\n      search_query = state.custom_search_query;\n    } else {\n      // } else if (autocomplete_string == 'Generic search query') {\n      search_query = example_search_default;\n    }\n    // 'Generic search query',\n    // 'Optimized search in Virtuoso',\n    // 'Optimized search in Ontotext GraphDB',\n    // 'Define a custom search query', state.custom_search_query\n  //   t example_search_graphdb\n  // const example_search_virtuoso\n  // const example_search_default\n    // convert autocomplete to search queries\n    updateState({ search_query: search_query, search_query_autocomplete: search_query_autocomplete})\n  }\n\n  // Save settings\n  // function handleSubmit (event: any) {\n  //   event.preventDefault();\n  //   updateContext({\n  //     describe_endpoint: state.sparql_endpoint_autocomplete, \n  //     // graphs_overview: this.formGraphsOverview.current.value,\n  //     // graph_uri_resolution: this.formGraphUriResolution.current.value,\n  //     // openapi_url: this.state.openapi_url_autocomplete, \n  //     // comunica_url: this.state.comunica_url_autocomplete,\n  //     // filebrowser_url: this.state.filebrowser_url_autocomplete, \n  //     // search_query: this.formSearchQuery.current.value, \n  //   });\n  //   updateState({ open: true });\n  // }\n  function handleSubmit (event: any) {\n    // Prevent from reloading the page when submitting the form:\n    // event.preventDefault();\n    updateState({ open: true });\n    console.log('context before change, and sparql endpoint autocomplete value')\n    console.log(context)\n    console.log(state.sparql_endpoint_autocomplete)\n    setContext(state.sparql_endpoint_autocomplete)\n    console.log('Context after setContext')\n    console.log(context)\n    const settings_object = {\n      sparql_endpoint: state.sparql_endpoint_autocomplete,\n      metadata_endpoint: state.metadata_endpoint_autocomplete,\n      search_query: state.search_query,\n      search_query_autocomplete: state.search_query_autocomplete,\n    }\n    localStorage.setItem(\"intothegraphSettings\", JSON.stringify(settings_object));\n  }\n\n  // function confirmDeleteCache() {\n  //   updateState({ dialogOpen: true });\n  // }\n  // function doDeleteCache() {\n  //   localStorage.clear();\n  //   window.location.reload();\n  // }\n\n  const sparqlEndointList = [\n    'https://graphdb.dumontierlab.com/repositories/trek',\n    'https://graphdb.dumontierlab.com/repositories/bio2vec',\n    'https://graphdb.dumontierlab.com/repositories/ncats-red-kg',\n    'https://graphdb.dumontierlab.com/repositories/bio2rdf-ammar',\n    'https://bio2rdf.org/sparql',\n    'http://dbpedia.org/sparql',\n    'http://rdf.disgenet.org/sparql/',    // Disease - Gene associations and else. Virtuoso\n    'http://rdf.pathwaycommons.org/sparql/',\n    'https://stars-app.renci.org/uberongraph/sparql',\n    'http://w3id.org/FAIR_COVID19/sparql/',\n    'https://graphdb.dumontierlab.com/repositories/covid-kg',\n    'https://graphdb.dumontierlab.com/repositories/geoeconomics',  // IDS KG course (GeoNames and WorldBank)\n    'https://data.gesis.org/claimskg/sparql',   // ClaimsKG\n    'http://opencitations.net/index/sparql',  // Law OpenCitation corpus. Virtuoso\n    'http://opencitations.net/sparql',    // Virtuoso\n    'https://joinup.ec.europa.eu/sparql/',   // EU Joinup initiative. Virtuoso\n    'http://data.europa.eu/euodp/sparqlep', // EU Open Data Portal. Seems Virtuoso\n    'http://publications.europa.eu/webapi/rdf/sparql',  // EU Cellar Law dataset. Seems Virtuoso\n    'http://digital-agenda-data.eu/data/sparql', // EU  Digital Agenda Scoreboard dataset. Seems Virtuoso\n    'http://data.persee.fr/sparql',   // Dataset in French about publications and bibliography. Virtuoso\n    'http://lod.openlinksw.com/sparql',\n    'http://data.doremus.org/sparql',   // About Music and Arts. Virtuoso search works\n    'http://data.allie.dbcls.jp/sparql/',   // search service for abbreviations and long forms utilized in Lifesciences. Virtuoso\n    'http://sparql.southgreen.fr',\n    'https://sparql.nextprot.org',\n    'http://localhost:7200/repositories/demo',\n    'http://localhost:8890/sparql',\n    'http://localhost:8082/bigdata/sparql',\n    // 'https://query.wikidata.org/sparql',\n    // 'https://sparql.uniprot.org/sparql/',\n    // 'http://dbtune.org/bbc/peel/cliopatria/sparql',\n    // 'https://semantic.eea.europa.eu/sparql',\n    // 'http://void.rkbexplorer.com/sparql/',\n  ]\n\n    // const sparqlEndointList = [\n    //   { title: 'DBpedia Virtuoso', value: 'http://dbpedia.org/sparql' },\n    //   { title: 'Bio2RDF Virtuoso', value: 'https://bio2rdf.org/sparql' },\n    //   { title: 'NCATS Translator TReK', value: 'https://graphdb.dumontierlab.com/repositories/trek' },\n    //   { title: 'NCATS Translator TReK', value: 'https://graphdb.dumontierlab.com/repositories/ncats-red-kg' },\n    //   { title: 'Bio2RDF v5', value: 'https://graphdb.dumontierlab.com/repositories/bio2rdf-ammar' },\n    // ]\n\n  const example_search_graphdb = \"PREFIX luc: <http://www.ontotext.com/owlim/lucene#>\\nSELECT ?foundUri ?foundLabel {\\n    ?foundLabel luc:searchIndex '$TEXT_TO_SEARCH*' ;\\n    luc:score ?score .\\n    ?foundUri ?p ?foundLabel .\\n} ORDER BY ?score LIMIT 200\";\n  const example_search_virtuoso = \"SELECT ?foundUri ?foundLabel WHERE {\\n    ?foundUri <http://www.w3.org/2000/01/rdf-schema#label> ?foundLabel .\\n    ?foundLabel bif:contains '$TEXT_TO_SEARCH' .\\n} LIMIT 200\";\n  const example_search_default = \"SELECT ?foundUri ?foundLabel WHERE {\\n    ?foundUri ?p ?foundLabel .\\n    VALUES ?p {<http://www.w3.org/2000/01/rdf-schema#label> <https://w3id.org/biolink/vocab/name>} .\\n    FILTER(isLiteral(?foundLabel))\\n    FILTER contains(?foundLabel, '$TEXT_TO_SEARCH')\\n} LIMIT 5\";\n\n  React.useEffect(() => {\n    // Reset state\n    // updateState({describe_results: {}})\n    // updateState({search_results: {}})\n    // updateState({isLoading: true})\n\n    // Get URL params \n    // const params = new URLSearchParams(location.search + location.hash);\n\n    // let describe_uri = params.get('uri');\n    let describe_endpoint = '';\n    let search_query = '';\n\n    // Get sparql_endpoint from cookie intothegraphSettings\n    const localStorageConfig = localStorage.getItem(\"intothegraphSettings\");\n    if (localStorageConfig) {\n      let configState: any = JSON.parse(localStorageConfig);\n      updateState({\n        describe_endpoint: configState.sparql_endpoint,\n        search_query: configState.search_query,\n        search_query_autocomplete: configState.search_query_autocomplete,\n      })\n    }\n  }, [])\n  // }, [context])\n\n  return (<Container className='mainContainer'>\n    <form onSubmit={(event) => {\n      handleSubmit(event)}}>\n        <FormControl className={classes.settingsForm} style={{ width: '60ch', textAlign: 'left' }}>\n          {/* Use width to have it approximatelly the size of 60 characters  */}\n          <Typography variant=\"h5\" className={classes.paperTitle} style={{ textAlign: 'center' }}>\n            Settings\n          </Typography>\n          <FormHelperText style={{ textAlign: 'center' }}>Stored in a cookie 🍪</FormHelperText>\n\n          {/* Autocomplete to define the SPARQL endpoint URL */}\n          {/* <InputLabel id=\"autocomplete-sparql-endpoint-label\">\n            🔗 SPARQL endpoint URL\n          </InputLabel> */}\n          <Typography variant=\"body1\">\n            🔗 SPARQL endpoint URL\n          </Typography>\n          <Autocomplete\n            onChange={handleAutocompleteSparqlEndpoint}\n            onInputChange={handleAutocompleteSparqlEndpoint}\n            // onChange={handleAutocomplete(event, 'sparql_endpoint')}\n            // onInputChange={handleAutocomplete(event, 'sparql_endpoint')}\n            id=\"autocomplete-sparql-endpoint\"\n            options={sparqlEndointList}\n            // value={state.describe_endpoint}\n            freeSolo={true}\n            includeInputInList={true}\n            ListboxProps={{\n              className: classes.alignLeft,\n            }}\n            renderInput={params => <TextField {...params} \n            label=\"SPARQL endpoint URL\" \n            variant=\"outlined\" \n            // getOptionLabel={option => option.title}\n            // style={{ width: '60ch' }}\n            // size='small'\n            />}\n          />\n        {/* <FormHelperText id=\"helper-sparql-endpoint\">SPARQL endpoint URL</FormHelperText> */}\n\n        <Typography variant=\"body1\">\n          🏷️ Metadata endpoint URL\n        </Typography>\n        <Autocomplete\n          onChange={handleAutocompleteMetadataEndpoint}\n          onInputChange={handleAutocompleteMetadataEndpoint}\n          // onChange={handleAutocomplete(event, 'sparql_endpoint')}\n          // onInputChange={handleAutocomplete(event, 'sparql_endpoint')}\n          id=\"autocomplete-metadata-endpoint\"\n          options={[\n            'https://graphdb.dumontierlab.com/repositories/trek',\n          ]}\n          // value={state.describe_endpoint}\n          freeSolo={true}\n          includeInputInList={true}\n          ListboxProps={{\n            className: classes.alignLeft,\n          }}\n          renderInput={params => <TextField {...params} \n          label=\"Metadata endpoint URL\" \n          variant=\"outlined\" \n          // getOptionLabel={option => option.title}\n          // style={{ width: '60ch' }}\n          // size='small'\n          />}\n        />\n\n        {/* Dropdown to choose search query */}\n        {/* <FormControl variant=\"outlined\" className={classes.fullWidth}> */}\n        {/* <InputLabel id=\"autocomplete-search-query-label\">\n          Search query\n        </InputLabel> */}\n        {/* <FormHelperText>🔎 Search query</FormHelperText> */}\n        <Typography variant=\"body1\">\n          🔎 Search query\n        </Typography>\n        <Autocomplete\n            onChange={handleAutocompleteSearchQuery}\n            onInputChange={handleAutocompleteSearchQuery}\n            // onChange={handleAutocomplete(event, 'sparql_endpoint')}\n            // onInputChange={handleAutocomplete(event, 'sparql_endpoint')}\n            id=\"autocomplete-search-query\"\n            options={[\n              'Generic search query',\n              'Optimized search in Virtuoso',\n              'Optimized search in Ontotext GraphDB',\n              'Define a custom search query',\n            ]}\n            // value={state.search_query_autocomplete}\n            freeSolo={false}\n            ListboxProps={{\n              className: classes.alignLeft,\n            }}\n            renderInput={params => <TextField {...params} \n            label=\"Search query\" \n            variant=\"outlined\" \n            // getOptionLabel={option => option.title}\n            // style={{ width: '60ch' }}\n            // size='small'\n            />}\n          />\n        {/* <Select\n          labelId=\"form-graph-overview-label\"\n          label=\"Search query\"\n          // TODO: import from localStorage\n          defaultValue='generic'\n          // inputRef={this.formGraphsOverview}\n          // MenuProps={{\n          //   className: classes.fullWidth,\n          // }}\n          // SelectDisplayProps={{\n          //   className: classes.smallerFont,\n          //   style: {width: '100%'}\n          // }}\n          // InputProps={{\n          //   className: classes.smallerFont,\n          //   // style: {width: '100%'}\n          // }}\n          autoWidth\n        >\n          <MenuItem value=\"generic\">Generic search query</MenuItem>\n          <MenuItem value=\"virtuoso\">Optimized search in Virtuoso</MenuItem>\n          <MenuItem value=\"graphdb\">Optimized search in Ontotext GraphDB</MenuItem>\n          <MenuItem value=\"custom\">Define a custom search query</MenuItem>\n        </Select> */}\n        {/* </FormControl> */}\n\n\n        {/* <FormControl variant=\"outlined\" \n          className={classes.fullWidth}\n          >\n          <InputLabel id=\"form-graph-overview-label\">\n            Graphs overview query type\n          </InputLabel>\n          <Select\n            labelId=\"form-graph-overview-label\"\n            label=\"Graphs overview query type\"\n            defaultValue={triplestore.graphs_overview}\n            inputRef={this.formGraphsOverview}\n            // MenuProps={{\n            //   className: classes.fullWidth,\n            // }}\n            // SelectDisplayProps={{\n            //   className: classes.smallerFont,\n            //   style: {width: '100%'}\n            // }}\n            InputProps={{\n              className: classes.smallerFont,\n              // style: {width: '100%'}\n            }}\n            autoWidth\n          >\n            <MenuItem value=\"hcls\">HCLS descriptive metadata</MenuItem>\n            <MenuItem value=\"all\">Get all graphs (optimized in Virtuoso)</MenuItem>\n          </Select>\n        </FormControl>\n        <FormHelperText id=\"helper-graphs-overview\">2 possibilities: \"hcls\" gets only graphs described using HCLS metadata and \"all\" get all graphs (optimized in Virtuoso)</FormHelperText>\n        <FormControl variant=\"outlined\" \n          className={classes.fullWidth}\n          >\n          <InputLabel id=\"form-graph-uri-resolution-label\">\n            Resolution of Graph URIs\n          </InputLabel>\n          <Select\n            labelId=\"form-graph-uri-resolution-label\"\n            label=\"Resolution of Graph URIs\"\n            defaultValue={triplestore.graph_uri_resolution}\n            inputRef={this.formGraphUriResolution}\n            // MenuProps={{\n            //   className: classes.fullWidth,\n            // }}\n            // SelectDisplayProps={{\n            //   className: classes.smallerFont,\n            //   style: {width: '100%'}\n            // }}\n            InputProps={{\n              className: classes.smallerFont,\n              // style: {width: '100%'}\n            }}\n            autoWidth\n          >\n            <MenuItem value=\"classes\">Show only classes in the graph</MenuItem>\n            <MenuItem value=\"triples\">Show all triples in the graph (LDP, Nanopubs)</MenuItem>\n          </Select>\n        </FormControl>\n        <FormHelperText id=\"helper-graph-uri-resolution\">What is shown when resolving a URI as a graph</FormHelperText>\n      </Paper>\n      <Paper elevation={2} className={classes.paperPadding}>\n        <Typography variant=\"h5\" className={classes.paperTitle}>\n          Search query\n        </Typography>\n        <FormHelperText>\n          Change here the SPARQL query used when searching in the navbar search box. \n          Use $TEXT_TO_SEARCH to define where the text to search will be replaced in the query.\n          It should return a ?foundUri and a ?foundLabel to be displayed by the app.\n        </FormHelperText>\n        <TextField\n          id=\"textfield-search-query\"\n          label=\"Search query used by the app\"\n          placeholder=\"Search query used by the app\"\n          className={classes.fullWidth}\n          defaultValue={triplestore.search_query}\n          variant=\"outlined\"\n          inputRef={this.formSearchQuery}\n          multiline={true}\n          // size='small'\n          InputProps={{\n            className: classes.normalFont\n          }}\n          InputLabelProps={{\n            className: classes.normalFont\n          }}\n        />\n        <FormHelperText>\n          You can use those examples queries to use GraphDB or Virtuoso Search Index (it needs to have been enabled in the triplestore before):\n        </FormHelperText>\n        <TextField \n          className={classes.fullWidth}\n          id=\"search-graphdb\" \n          label=\"Search query for Ontotext GraphDB\" \n          variant=\"outlined\" multiline={true}\n          value={example_search_graphdb}\n          size='small'\n          InputProps={{\n            className: classes.smallerFont\n          }}\n          InputLabelProps={{\n            className: classes.smallerFont\n          }}\n        />\n        <TextField \n          className={classes.fullWidth}\n          id=\"search-virtuoso\" \n          label=\"Search query for OpenLink Virtuoso\" \n          variant=\"outlined\" multiline={true}\n          value={example_search_virtuoso}\n          size='small'\n          InputProps={{\n            className: classes.smallerFont\n          }}\n          InputLabelProps={{\n            className: classes.smallerFont\n          }}\n        />\n      <TextField \n          className={classes.fullWidth}\n          id=\"search-default\" \n          label=\"Default search query\" \n          variant=\"outlined\" multiline={true}\n          value={example_search_default}\n          size='small'\n          InputProps={{\n            className: classes.smallerFont\n          }}\n          InputLabelProps={{\n            className: classes.smallerFont\n          }}\n        />\n      </Paper>\n      <Paper elevation={2} className={classes.paperPadding}>\n        <Typography variant=\"h5\" className={classes.paperTitle}>\n          Interfaces\n        </Typography>\n        <Autocomplete\n          onChange={this.handleAutocomplete.bind(this, 'openapi_url')}\n          onInputChange={this.handleAutocomplete.bind(this, 'openapi_url')}\n          id=\"autocomplete-openapi-url\"\n          options={openapiList}\n          value={this.context.triplestore.openapi_url}\n          freeSolo={true}\n          includeInputInList={true}\n          ListboxProps={{\n            className: classes.alignLeft,\n          }}\n          renderInput={params => <TextField {...params} \n          label=\"Reasoner API URL\"\n          variant=\"outlined\" \n          // getOptionLabel={option => option.title}\n          // style={{ width: 300 }}\n          // size='small'\n          />}\n        />\n        <FormHelperText id=\"helper-graphs-overview\">URL to the OpenAPI UI to perform Reasoner API queries and RESTful queries to explore the SPARQL endpoint (require a RDF Knowledge graph compliant with the BioLink model)</FormHelperText>\n        <Autocomplete\n          onChange={this.handleAutocomplete.bind(this, 'comunica_url')}\n          onInputChange={this.handleAutocomplete.bind(this, 'comunica_url')}\n          id=\"autocomplete-comunica-url\"\n          options={comunicaList}\n          value={this.context.triplestore.comunica_url}\n          freeSolo={true}\n          includeInputInList={true}\n          ListboxProps={{\n            className: classes.alignLeft,\n          }}\n          renderInput={params => <TextField {...params} \n          label=\"Comunica widget URL (Archives)\"\n          variant=\"outlined\" \n          />}\n        />\n        <FormHelperText id=\"helper-graphs-overview\">URL to the Comunica widget to expose a Triple Pattern Fragment server to query archives.</FormHelperText>\n        <Autocomplete\n          onChange={this.handleAutocomplete.bind(this, 'filebrowser_url')}\n          onInputChange={this.handleAutocomplete.bind(this, 'filebrowser_url')}\n          id=\"autocomplete-filebrowser-url\"\n          options={filebrowserList}\n          value={this.context.triplestore.filebrowser_url}\n          freeSolo={true}\n          includeInputInList={true}\n          ListboxProps={{\n            className: classes.alignLeft,\n          }}\n          renderInput={params => <TextField {...params} \n          label=\"Filebrowser URL to download RDF dumps\"\n          variant=\"outlined\" \n          />}\n        />\n        <FormHelperText id=\"helper-graphs-overview\">URL to the filebrowser to download RDF data dumps of the different graphs (needs to be manually exported at the moment)</FormHelperText> */}\n        <Button type=\"submit\"\n        variant=\"contained\" \n        // className={classes.saveButton} \n        // startIcon={<Icon>save</Icon>}\n        color=\"primary\" >\n          <SaveIcon />&nbsp;Save settings\n        </Button>\n        {/* <Button\n        variant=\"contained\" size=\"small\" \n        className={classes.saveButton} \n        onClick={this.confirmDeleteCache}\n        startIcon={<Icon>delete</Icon>}\n        color=\"secondary\" >\n          Delete cache\n        </Button> */}\n        <Snackbar open={state.open} onClose={handleClose} autoHideDuration={3000}>\n          {/* <Alert severity=\"success\">\n            Settings has been saved\n          </Alert> */}\n        </Snackbar>\n      </FormControl>\n    </form>\n    {/* <Dialog\n      open={this.state.dialogOpen}\n      onClose={this.handleDialogClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{\"Delete the cache?\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          This will delete the cache containing your current settings.<br/>\n          This can help resolve issues related to the cache.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={this.doDeleteCache} color=\"secondary\">\n          Delete cache\n        </Button>\n        <Button onClick={this.handleDialogClose} color=\"primary\" autoFocus>\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog> */}\n  </Container>\n  );\n}\n\n// Turgay snippet:\n// state ={\n//   number: 5,\n//   data: []\n// }\n// The component has been loaded\n// componentDidMount() {\n//   this.x =6\n//   setInterval(()=> {\n//     const {x, state: { data, number }} = this;\n//     console.log(x, data, number)\n//     //const data = this.state.data;\n//     data.push(number)\n//     this.setState({data})\n//   }, 1000)\n// }\n// render() {\n//   const { state: { number, data }} = this;\n//   return (\n//     <div className=\"Sparql\">\n//       <p>\n//         This is the {number} sparql me page. \n//       </p>\n//       {\n//         data.map(val => <p>{val}</p>)\n//       }\n//     </div>\n//   );\n// }","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Button, Paper, InputBase, IconButton, Popper, ClickAwayListener, Typography } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nimport AppContext from \"./Context\";\nimport Settings from \"./Settings\";\n\n// import iconImage from '../../assets/icon.png';\n\n// import { AuthButton, Value } from '@solid/react';\n\nconst useStyles = makeStyles(theme => ({\n  menuButton: {\n    color: theme.palette.common.white,\n    margin: theme.spacing(1, 1),\n  },\n  solidButton: {\n    backgroundColor: theme.palette.primary.main,\n    color: '#fff',\n    borderRadius: '6px',\n    // boxShadow: '0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)',\n    padding: '7px 14px',\n    '&:hover': {  \n      backgroundColor: theme.palette.primary.dark,\n      cursor: 'pointer'\n    }\n  },\n  linkButton: {\n    textTransform: 'none',\n    textDecoration: 'none',\n  },\n  linkLogo: {\n    // Seems to fit the 48px navbar height...\n    // height: '48px',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  paperPadding: {\n    padding: theme.spacing(2, 2),\n    margin: theme.spacing(2, 2),\n  },\n  // Search box\n  paperSearch: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    // 50% of top appbar\n    width: `40%`,\n  },\n  searchInput: {\n    marginLeft: theme.spacing(1),\n    // Hardcoded width for search input\n    width: '50%',\n    fontSize: '14px',\n    flex: 1,\n  },\n  iconButton: {\n    padding: 5,\n  },\n}))\n  \nexport default function NavBar() {\n  const classes = useStyles();\n\n  // const [context, setContext] = React.useContext(AppContext);\n  // setContext(\"New Value\")\n\n  const [state, setState] = React.useState({\n    solid_webid: '',\n    search_text: '',\n    describe_uri: '',\n    describe_endpoint: '',\n    // settings_open: false\n  });\n\n  // Popper for settings\n  const [open, setOpen] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const handleClick = (event: any) => {\n    console.log('Click button!');\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n    setOpen((prev) => !prev);\n  };\n  const handleClickAway = () => {\n    setOpen(false);\n    setAnchorEl(anchorEl ? null : anchorEl);\n    console.log('Click away!');\n  };\n  const id = open ? 'simple-popper' : undefined;\n\n  // Avoid conflict when async calls\n  const stateRef = React.useRef(state);\n  const updateState = React.useCallback((update) => {\n    stateRef.current = {...stateRef.current, ...update};\n    setState(stateRef.current);\n  }, [setState]);\n\n  let history = useHistory();\n\n  // const appContext = React.useContext(AppContext);\n\n  function submitSearch(event: any) {\n    event.preventDefault();\n    history.push('/describe?uri=' + state.search_text)\n    // Hard reload of the page: location.reload();\n  }\n\n  function handleChange(event: any) {\n    updateState({search_text: event.target.value});\n  }\n\n  return (\n    <AppBar title=\"\" position='static'>\n      <Toolbar variant='dense'>\n        <Link to=\"/\" className={classes.linkButton}>\n          {/* <img src={iconImage} style={{height: '2em', width: '2em', marginRight: '10px'}} alt=\"Logo\" /> */}\n          <Tooltip title='Bio2RDF homepage'>\n            <Button className={classes.menuButton}>\n              <ExploreIcon />&nbsp;Bio2RDF\n            </Button>\n          </Tooltip>  \n        </Link>\n        <Link to=\"/describe?uri=http://bio2rdf.org/drugbank:DB00002\" className={classes.linkButton}>\n          <Tooltip title='Describe an URI in a SPARQL endpoint'>\n            <Button className={classes.menuButton}>\n              <SearchIcon />&nbsp;Describe URI\n            </Button>\n          </Tooltip>\n        </Link>\n        <div className=\"flexGrow\"></div>\n        {/* <Tooltip title='Go to IDS Best Practices documentation'>\n          <Button className={classes.menuButton} target=\"_blank\"\n          href=\"https://maastrichtu-ids.github.io/best-practices\" rel=\"noopener noreferrer\">\n            <MenuBookIcon />\n          </Button>\n        </Tooltip> */}\n        <Paper component=\"form\" className={classes.paperSearch}\n          onSubmit={submitSearch}\n        >\n          <InputBase  // https://material-ui.com/api/input-base/\n            className={classes.searchInput}\n            // placeholder=\"Search SPARQL endpoint\"\n            placeholder={\"Search\"}\n            onChange={handleChange}\n            inputProps={{ 'aria-label': 'search' }}\n            // fullWidth={true}\n          />\n          <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n            <SearchIcon />\n          </IconButton>\n        </Paper>\n        {/* <ClickAwayListener onClickAway={handleClickAway}> */}\n          {/* Nice popper example: https://stackoverflow.com/questions/55143914/material-ui-clickawaylistener-close-when-clicking-itself */}\n          {/* <div> */}\n          <Tooltip  title='Application settings'>\n            <Button className={classes.menuButton} onClick={handleClick}>\n              <SettingsIcon />\n            </Button>\n          </Tooltip>\n          <Popper open={open} anchorEl={anchorEl}>\n            <ClickAwayListener onClickAway={handleClickAway}>\n              <Paper elevation={4} className={classes.paperPadding}>\n                <Settings />\n              </Paper>\n            </ClickAwayListener>\n          </Popper>\n          {/* </div> */}\n        {/* </ClickAwayListener> */}\n        <Tooltip  title='Go to https://github.com/vemonet/bio2rdf-website'>\n          <Button className={classes.menuButton} target=\"_blank\"\n          href=\"https://github.com/vemonet/bio2rdf-website\" rel=\"noopener noreferrer\">\n            <GitHubIcon />\n          </Button>\n        </Tooltip>\n        {/* <AuthButton title='Login with SOLID' className={classes.solidButton} popup=\"https://inrupt.net/common/popup.html\"/> */}\n      </Toolbar>\n    </AppBar>\n  );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(theme => ({\n  darkLink: {\n    textDecoration: 'none',\n    color: 'inherit',\n    '&:hover': {\n      color: theme.palette.primary.light,\n      textDecoration: 'none',\n    },\n  },\n  whiteLink: {\n    textDecoration: 'none',\n    color: 'inherit',\n    '&:hover': {\n      color: theme.palette.primary.dark,\n      textDecoration: 'none',\n    },\n  },\n  footer: {\n    padding: theme.spacing(2),\n    marginTop: 'auto',\n    color: 'white',\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n\nfunction Copyright() {\n  const classes = useStyles();\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <a className={classes.darkLink} target=\"_blank\" rel=\"noopener noreferrer\"\n      href=\"https://maastrichtuniversity.nl/ids\">\n        Institute of Data Science at Maastricht University\n      </a>{' '}\n      {'2020.'}\n    </Typography>\n  );\n}\n\nexport default function Footer() {\n  const classes = useStyles();\n  // Set state in functional style:\n  // const [state, setState] = React.useState({search: '', name: 'Vincent'});\n  // console.log(state.search);\n  // // Set search without chaging name\n  // setState({...state, search: 'yo'})\n  // const onNameChange = React.useCallback((filterName) => {\n  //   console.log('callback', state.name);\n  // },\n  // [state.name]);\n  // // Tells callback to reload when change to state.name\n\n  // React.useEffect(() => {\n  //   console.log('componentDID mount');\n  //   return () => {\n  //     console.log('willMount');\n  //   }\n  // }, []) \n  // Empty dep list: will only run when componentDidMount\n\n  return (\n      <footer className={classes.footer}>\n        <Container maxWidth=\"md\" style={{textAlign: 'center'}}>\n          <Typography variant=\"body2\" >\n            This website is licensed under the&nbsp;\n            <a className={classes.whiteLink} target=\"_blank\" rel=\"noopener noreferrer\"\n            href=\"https://github.com/vemonet/bio2rdf-website/blob/main/LICENSE\">\n              MIT license\n            </a>\n            <br/>License of the displayed data is defined by the SPARQL endpoint provider\n            {/* <img src={require('../assets/images/mit_license.png')} /> */}\n          </Typography>\n          <Copyright />\n        </Container>\n      </footer>\n  );\n}","\nexport default {\n    // sparql_endpoint: 'https://bio2rdf.org/sparql',\n    sparql_endpoint: 'https://bio2rdf.137.120.31.102.nip.io/sparql',\n    website_url: 'https://bio2rdf.org/',\n    base_uri: 'http://bio2rdf.org/',\n    prefix_registry: {\n        \"rdf\":         \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\":        \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"owl\":         \"http://www.w3.org/2002/07/owl#\",\n        \"skos\":        \"http://www.w3.org/2004/02/skos/core#\",\n        \"dc\":          \"http://purl.org/dc/elements/1.1/\",\n        \"dct\":         \"http://purl.org/dc/terms/\",\n        \"dctypes\":     \"http://purl.org/dc/dcmitype/\",\n        \"csvw\":        \"http://www.w3.org/ns/csvw#\",\n        \"bl\":          \"https://w3id.org/biolink/vocab/\",\n        \"biolink\":     \"http://w3id.org/biolink/vocab/\",\n        \"d2s\":         \"https://w3id.org/d2s/\",\n        \"omop\":        \"http://api.ohdsi.org/WebAPI/vocabulary/concept/\",\n        \"cohd\":        \"https://w3id.org/trek/cohd/\",\n        \"bio2rdf\":     \"http://bio2rdf.org/\",\n        \"dbo\":         \"http://dbpedia.org/ontology/\",\n        \"dbp\":         \"http://dbpedia.org/property/\",\n        \"wd\":          \"http://www.wikidata.org/entity/\",\n        \"wdt\":         \"http://www.wikidata.org/prop/direct/\",\n        \"foaf\":        \"http://xmlns.com/foaf/0.1/\",\n        \"idot\":        \"http://identifiers.org/idot/\",\n        \"dcat\":        \"http://www.w3.org/ns/dcat#\",\n        \"void\":        \"http://rdfs.org/ns/void#\",\n        \"void-ext\":    \"http://ldf.fi/void-ext#\",\n        \"obo\":         \"http://purl.obolibrary.org/obo/\",\n        \"ncit\":        \"http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#\",\n        \"xsd\":         \"http://www.w3.org/2001/XMLSchema#\",\n        \"schema\":      \"https://schema.org/\",\n        \"cito\":        \"http://purl.org/spar/cito/\",\n        \"prov\":        \"http://www.w3.org/ns/prov#\",\n        \"pav\":         \"http://purl.org/pav/\",\n        \"pplan\":       \"http://purl.org/net/p-plan#\",\n        \"np\":          \"http://www.nanopub.org/nschema#\",\n        \"npx\":         \"http://purl.org/nanopub/x/\",\n        \"oad\":          \"http://culturalis.org/oad#\",\n        \"virtrdf\":      \"http://www.openlinksw.com/schemas/virtrdf#\",\n        \"sd\":           \"http://www.w3.org/ns/sparql-service-description#\",\n        \"gpml\":         \"http://vocabularies.wikipathways.org/gpml#\",\n        \"wp\":           \"http://vocabularies.wikipathways.org/wp#\",\n        \"gr\":           \"http://purl.org/goodrelations/v1#\",\n        \"ido\":           \"https://identifiers.org/\"\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Config from \"./Config\";\n\n// var Config = require('Config')\n\nconst useStyles = makeStyles(theme => ({\n  uriLink: {\n    textDecoration: 'none',\n    color: 'rgba(0, 0, 0, 0.87)',\n    '& :hover': {\n      color: theme.palette.primary.main,\n    },\n    overflowWrap: 'break-word'\n  }\n}));\n\n\n// Format a link to be displayedby shortening URI\nexport default function LinkDescribe(props: any) {\n  const classes = useStyles();\n\n  // TODO: improve, use centralized service? (prefixcommons/prefix.cc)\n  const prefixRegistry = Config.prefix_registry;\n\n  function shortenUri(uriToShorten: string) {\n    for (const prefix in prefixRegistry) {\n      if (uriToShorten.startsWith(prefixRegistry[prefix])) {\n        return uriToShorten.replace(prefixRegistry[prefix], prefix + ':');\n      }\n    }\n    return uriToShorten;\n  }\n\n  if(/^(?:node[0-9]+)|((https?|ftp):.*)$/.test(props.uri)) {\n    // Process URIs\n    return (\n      <Link to={{\n        pathname: '/describe',\n        search: '?uri=' + props.uri,\n      }} className={classes.uriLink}>\n        <Typography variant={props.variant} className={props.passClass}\n        style={{overflowWrap: 'break-word'}}>\n          {shortenUri(props.uri)}\n        </Typography>\n      </Link>\n      // <a href={'/describe?uri=' + props.uri} className={classes.uriLink}>\n      //   <Typography variant={props.variant} className={props.passClass}\n      //   style={{overflowWrap: 'break-word'}}>\n      //     {shortenUri(props.uri)}\n      //   </Typography>\n      // </a>\n    )\n  }\n  return (\n    // For non URI\n    <Typography variant={props.variant} className={props.passClass} \n    style={{textAlign: 'left', overflowWrap: 'break-word'}}>\n      {props.uri}\n    </Typography>\n  )\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Typography, Container, Box, Button, Chip, Tooltip, Grid, Paper, CircularProgress, Card, CardContent, CardHeader, Collapse, CardActions, List, ListItem, ListItemAvatar, Avatar, ListItemText } from \"@material-ui/core\";\nimport { IconButton, InputBase } from \"@material-ui/core\";\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CodeIcon from '@material-ui/icons/Code';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport SendIcon from '@material-ui/icons/Send';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport OpenAPIIcon from '@material-ui/icons/Adjust';\nimport RmlIcon from '@material-ui/icons/AllInclusive';\nimport R2rmlIcon from '@material-ui/icons/Storage';\nimport NanopubIcon from '@material-ui/icons/Chat';\nimport DatasetIcon from '@material-ui/icons/Archive';\nimport CsvwIcon from '@material-ui/icons/List';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport BookIcon from '@material-ui/icons/Book';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\n// @ts-ignore\nimport iconImage from '../../assets/icon.png';\n\n// import { FormControl, TextField, Input, InputLabel, FormHelperText, Select } from '@material-ui/core';\n// import GetAppIcon from '@material-ui/icons/GetApp';\n// import Autocomplete from '@material-ui/lab/Autocomplete';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import Snackbar from '@material-ui/core/Snackbar';\n// import MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n// import { Graph } from \"perfect-graph\";\n\nconst useStyles = makeStyles(theme => ({\n  link: {\n    textDecoration: 'none',\n    color: theme.palette.primary.main,\n    '&:hover': {\n      color: theme.palette.secondary.main,\n      textDecoration: 'none',\n    },\n  },\n}))\n\n\nexport default function About() {\n  const classes = useStyles();\n  const theme = useTheme();\n  \n  const [state, setState] = React.useState({\n    show_info_card: false,\n  });\n  const stateRef = React.useRef(state);\n\n  // Avoid conflict when async calls\n  // Can be done with another lib (cf. Turgay)\n  const updateState = React.useCallback((update) => {\n    stateRef.current = {...stateRef.current, ...update};\n    setState(stateRef.current);\n  }, [setState]);\n\n  return(\n    // <Card style={{textAlign: 'left' }}>\n    <Card>\n        <CardHeader\n          action={\n            <IconButton style={{fontSize: '16px'}}\n              onClick={() => { updateState({ show_info_card: !state.show_info_card}) }}\n              name='show_info_card'\n              aria-expanded={state.show_info_card}\n              aria-label=\"show about\"\n            >\n              About&nbsp;\n              {!state.show_info_card &&\n                <ExpandMoreIcon />\n              }\n              {state.show_info_card &&\n                <ExpandLessIcon />\n              }\n            </IconButton>\n          }\n          title=\"Bio2RDF\"\n          subheader={\"Linked Data for the Life Sciences\"}\n        />\n\n\n        <Collapse in={state.show_info_card} timeout=\"auto\" unmountOnExit>\n          <CardContent style={{ textAlign: 'left' }}>\n\n            {/* <Paper elevation={4} className={classes.paperPadding}> */}\n            <Typography variant=\"body1\">\n              Bio2RDF is an open-source project that uses Semantic Web technologies to build and provide the largest network of Linked Data for the Life Sciences. Bio2RDF defines a set of simple conventions to create RDF(S) compatible Linked Data from a diverse set of heterogeneously formatted sources obtained from multiple data providers. \n            </Typography>\n\n            {/* <Typography variant=\"body1\">\n              <a href='https://github.com/micheldumontier/torres-api-platform/' className={classes.link} target='_blank' rel=\"noopener noreferrer\">TORRES API platform</a> to store HCLS descriptive metadata for your dataset\n            </Typography> */}\n\n            {/* <List>\n              <ListItem>\n                <ListItemAvatar>\n                  <Avatar>\n                    <MenuBookIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText>\n                  A web-based UI to browse any SPARQL endpoints content easily\n                </ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemAvatar>\n                  <Avatar>\n                    <DeviceHubIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText>\n                  Native support for graphs (nquads)\n                </ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemAvatar>\n                  <Avatar>\n                    <ExploreIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText> \n                  Work in progress: visualize and browse concepts using <a href='https://perfectgraph-5c619.web.app' target='_blank' rel=\"noopener noreferrer\"><code>perfect-graph</code></a>\n                </ListItemText>\n              </ListItem>\n              <ListItem>\n                <ListItemAvatar>\n                  <Avatar>\n                    <ExploreIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText> \n                  Work in progress: insights about the content of the triplestore and its different graphs, using precomputed HCLS descriptives statistics\n                </ListItemText>\n              </ListItem>\n            </List> */}\n\n          </CardContent>\n        </Collapse>\n      </Card>\n  )\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Typography, Container, Paper, CircularProgress, List, ListItem, ListItemAvatar, Avatar, ListItemText, IconButton, Button, Card } from \"@material-ui/core\";\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub';\n\nimport axios from 'axios';\n// Import jquery datatables.net\nimport 'datatables.net-dt/css/jquery.dataTables.min.css'\nconst $ = require('jquery');\n$.DataTable = require('datatables.net');\n\nimport Yasgui from \"@triply/yasgui\";\nimport \"@triply/yasgui/build/yasgui.min.css\";\n\nimport { Graph, drawLine } from \"perfect-graph\";\nimport { ApplicationProvider } from 'unitx-ui';\n\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport Cytoscape from 'cytoscape';\nimport Cola from 'cytoscape-cola';\n\nimport LinkDescribe from '../components/LinkDescribe';\nimport About from './About';\nimport Config from \"../components/Config\";\n\n// @ts-ignore \nimport SparqlQueries from '../../assets/queries.rq';\n\nCytoscape.use(Cola);\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    // textAlign: 'center',\n  },\n  paperSearch: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: '30%',\n  },\n  searchInput: {\n    marginLeft: theme.spacing(1),\n    width: '50%',\n    fontSize: '14px',\n    flex: 1,\n  },\n  link: {\n    textDecoration: 'none',\n    textTransform: 'none',\n    color: theme.palette.primary.main,\n    '&:hover': {\n      color: theme.palette.secondary.main,\n      textDecoration: 'none',\n    },\n  },\n  paperPadding: {\n    padding: theme.spacing(2, 2),\n    margin: theme.spacing(2, 0),\n  },\n  paperQuery: {\n    padding: theme.spacing(2, 2),\n    margin: theme.spacing(2, 0),\n    \"&:hover\": { transform: \"scale3d(1.05, 1.05, 1)\" },\n  },\n  cardSubtitle: {\n    fontSize: 14,\n    marginTop: 8,\n  },\n  loadSpinner: {\n    padding: theme.spacing(10, 10)\n  },\n}))\n\nexport default function Homepage() {\n  const classes = useStyles();\n  const theme = useTheme();\n  \n  const [state, setState] = React.useState({\n    isLoading: true,\n    // describe_endpoint: '',\n    sparql_queries: [],\n    yasgui: {},\n    search: '',\n    get_all_graphs_results: [],\n    hcls_overview_results: [],\n    entities_relations_overview_results: [],\n    graph_data: {nodes: [], edges: []},\n    cytoscape_elements: [],\n    repositories_hash: {},\n    category_pie: {}\n  });\n\n  const stateRef = React.useRef(state);\n\n  // Avoid conflict when async calls\n  // Can be done with another lib (cf. Turgay)\n  const updateState = React.useCallback((update) => {\n    stateRef.current = {...stateRef.current, ...update};\n    setState(stateRef.current);\n  }, [setState]);\n\n  function displayTableCell(stringToDisplay: any) {\n    if (stringToDisplay) {\n      return stringToDisplay.value;\n    } else {\n      return 'Not computed';\n    }\n  }\n\n\n  // Run at start of the page\n  React.useEffect(() => {\n\n    let describe_endpoint = Config.sparql_endpoint;\n    let sparql_queries: any = []\n\n    // Get SPARQL queries\n    fetch(SparqlQueries)\n      .then((r) => r.text())\n      .then(text  => {\n        console.log(\"SparqlQueries\");\n        // console.log(text);\n        const queries_array = text.split('---')\n        queries_array.forEach((query_string: any) => {\n          // console.log(query_string);\n          // yaml_string = \"\\n\".join([row.lstrip('#+') for row in sparql_query.split('\\n') if row.startswith('#+')])\n          let query_summary;\n          let query_params: any = [];\n          let query_no_comments = query_string;\n          // Parse basic grlc/BASIL metadata in SPARQL queries\n          query_string.split('\\n').forEach((line: any) => {\n            if (line.startsWith('#+ summary: ')) {\n              query_summary = line.replace('#+ summary: ', '')\n            }\n            if (line.startsWith('#+ ')) {\n              // Handle params line\n              query_no_comments = query_no_comments.replace(line + '\\n', '')\n              query_params.push(line.replace('#+ ', ''))\n            }\n          })\n          sparql_queries.push({\n            'summary': query_summary,\n            'params': query_params.join('\\n'),\n            'query': query_no_comments.trim(),\n            'full_query': query_string.trim(),\n            // 'tags': query_summary\n          })\n        })\n        console.log(sparql_queries);\n        updateState( { sparql_queries: sparql_queries } );\n      }) \n\n    Yasgui.defaults.requestConfig.endpoint = describe_endpoint;\n    // @ts-ignore If endpoint and query provided\n    let yasgui: any = new Yasgui(document.getElementById('yasguiDiv'), {\n      requestConfig: { endpoint: describe_endpoint },\n      copyEndpointOnNewTab: true,\n    });\n    updateState( { yasgui: yasgui } );\n    // yasgui.addTab(\n    //   true, // set as active tab\n    //   { ...Yasgui.Tab.getDefaults(), yasqe: { value: props.query }}\n    // );\n\n    axios.get(describe_endpoint + `?query=` + encodeURIComponent(get_all_graphs_query))\n      .then((res: any) => {\n        console.log('after get all graphs');\n        console.log(res);\n        if (res.data.results){\n          updateState( { get_all_graphs_results: res.data.results.bindings } );\n          // updateState({ graphsLoading: false });\n          // $(this.refs.graphsOverview).DataTable();\n          $('#datatableAllGraphs').DataTable({\n            \"autoWidth\": false\n          });\n        }\n      })\n      .catch((error: any) => {\n        console.log('Query to get all graphs failed');\n        console.log(error);\n      });\n\n    axios.get(describe_endpoint + `?query=` + encodeURIComponent(hcls_overview_query))\n      .then((res: any) => {\n        if (res.data.results){\n          updateState( { hcls_overview_results: res.data.results.bindings } );\n          // updateState({ graphsLoading: false });\n          // $(this.refs.graphsOverview).DataTable();\n          $('#datatableHclsOverview').DataTable({\n            \"autoWidth\": false\n          });\n        }\n      })\n      .catch((error: any) => {\n        console.log('Query to get HCLS stats overview failed');\n        console.log(error);\n      });\n\n    axios.get(describe_endpoint + `?query=` + encodeURIComponent(entities_relations_query))\n      .then((res: any) => {\n        if (res.data.results){\n          updateState( { entities_relations_overview_results: res.data.results.bindings } );\n          // updateState({ graphsLoading: false });\n          // $(this.refs.graphsOverview).DataTable();\n          $('#datatableEntitiesRelationOverview').DataTable({\n            \"autoWidth\": false\n          });\n\n          let graph_nodes: any = {}\n          let graph_edges: any = {}\n          let cytoscape_elements: any = []\n          let node_count = 1;\n          let edge_count = 0;\n          const edge_max = 100;\n\n          // Prepare perfect graph and cytoscape data\n          res.data.results.bindings.forEach((result_row: any) => {\n            let subject_count = 1;\n            if (result_row.subjectCount) {\n              subject_count = result_row.subjectCount.value;\n            }\n            // Add subject node to hash if not present\n            if (!(result_row.subject.value in graph_nodes)) {\n              // If not already in array\n              graph_nodes[result_row.subject.value] = {\n                id: result_row.subject.value,\n                position: { x: node_count * 80, y: node_count * 100 },\n                data: { uri: result_row.subject.value, color: 'red', size: subject_count },\n              };\n              // cytoscape_elements.push({ data: { \n              //   id: result_row.subject.value, \n              //   label: result_row.subject.value, \n              //   size: result_row.subjectCount.value\n              // } })\n              node_count += 1;\n            } else {\n              graph_nodes[result_row.subject.value].data.size += subject_count;\n            }\n\n            let object_count = 1;\n            if (result_row.objectCount) {\n              object_count = result_row.objectCount.value;\n            }\n            // Add object node\n            if (result_row.object) {\n              if (!(result_row.object.value in graph_nodes)) {\n                // If not already in array\n                graph_nodes[result_row.object.value] = {\n                  id: result_row.object.value,\n                  position: { x: node_count * 80, y: node_count * 40 },\n                  data: { uri: result_row.object.value, color: 'green', size: object_count },\n                };\n                // cytoscape_elements.push({ data: { \n                //   id: result_row.object.value, \n                //   label: result_row.object.value,\n                //   size: result_row.objectCount.value\n                // } })\n                node_count += 1;\n              } else {\n                graph_nodes[result_row.object.value].data.size += object_count;\n              }\n            }\n\n            // Add edge between the 2 nodes\n            if (result_row.object && edge_count < edge_max) {\n              const edge_id = result_row.subject.value + result_row.predicate.value + result_row.object.value;\n              if (!(edge_id in graph_edges)) {\n                if (!(result_row.object.value === result_row.subject.value)) {\n                  // Prevents link to itself (too confusing currently)\n                  graph_edges[edge_id] = {\n                    id: edge_id,\n                    source: result_row.subject.value,\n                    target: result_row.object.value,\n                    data: { uri: result_row.predicate.value, color: 'green' }\n                  };\n                  cytoscape_elements.push({ data: { \n                    source: result_row.subject.value, \n                    target: result_row.object.value, \n                    label: result_row.predicate.value \n                  } })\n                }\n                edge_count += 1\n              }\n            }\n          })\n\n        // Convert graph nodes and edges objects to arrays\n        const graph_nodes_array = Object.keys(graph_nodes).map(function(node_id){\n          cytoscape_elements.push({ data: { \n            id: node_id, \n            label: node_id, \n            size: graph_nodes[node_id].data.size\n          } })\n          return graph_nodes[node_id];\n        });\n        const graph_edges_array = Object.keys(graph_edges).map(function(edge_id){\n          // cytoscape_elements.push({ data: { \n          //   source: graph_edges[edge_id].source, \n          //   target: graph_edges[edge_id].target, \n          //   label: graph_edges[edge_id].data.uri \n          // } })\n          return graph_edges[edge_id];\n        });\n\n        console.log('Graph nodes and edges data');\n        console.log(graph_nodes_array);\n        console.log(graph_edges);\n\n\n        updateState({\n          graph_data: { nodes: graph_nodes_array, edges: graph_edges_array },\n          cytoscape_elements: cytoscape_elements,\n          isLoading: false\n        })\n        }\n      })\n      .catch((error: any) => {\n        console.log('Query to get all HCLS entities-relations infos FAILED:');\n        console.log(error);\n      });\n\n\n  }, [])  \n  // This useless array needs to be added for React to understand he needs to use the state inside...\n\n  // }, [solid_webid])\n  // Trying out the SOLID webId hook\n\n  const get_all_graphs_query = `SELECT DISTINCT ?graph WHERE { GRAPH ?graph {?s ?p ?o} }`;\n\n  // TODO: For Bio2RDF documented queries fails\n  // https://github.com/bio2rdf/bio2rdf-scripts/wiki/Bio2RDF-Dataset-Summary-Statistics\n\n  // Change Cytoscape layout\n  // https://js.cytoscape.org/#layouts\n\n  const cytoscape_layout = {\n    name: 'cola',\n    nodeSpacing: 400,\n    edgeLengthVal: 1500,\n    animate: false,\n    randomize: false,\n    maxSimulationTime: 1500\n  }\n  // const cytoscape_layout = { \n  //   name: 'concentric',\n  //   minNodeSpacing: 200\n  // };\n  // const cytoscape_layout = { name: 'breadthfirst' };\n  // const cytoscape_layout = {\n  //   name: 'cose',\n  //   animate: 'end',\n  //   fit: true,\n  //   componentSpacing: 1000,\n  //   nodeOverlap: 10,\n  //   nodeRepulsion: function( node: any ){ return 4092; },\n  //   idealEdgeLength: function( edge: any ){ return 300; },\n  // };\n\n  function loadSparqlQuery(query_string: any) {\n    const yasgui: any = state.yasgui\n    yasgui.addTab(\n      true, // set as active tab\n      { ...Yasgui.Tab.getDefaults(), yasqe: { value: query_string }}\n    )\n    updateState({ yasgui: yasgui })\n  }\n\n  return(\n    <Container className='mainContainer'>\n\n      <About />\n\n      {/* Display YASGUI */}\n      <Paper elevation={4} className={classes.paperPadding} style={{ textAlign: 'left', marginTop: theme.spacing(4) }}>\n        <div id=\"yasguiDiv\"></div>\n      </Paper>\n\n      <Typography variant=\"h5\" style={{ textAlign: 'center', marginTop: theme.spacing(6), marginBottom: theme.spacing(2) }} >\n        SPARQL queries for Bio2RDF\n      </Typography>\n      {state.sparql_queries.map((query: any, key: number) => {\n        // return <Tooltip title={displayDescription(row.name, row.description)} key={key}>\n        return <div key={key} onClick={ () => { loadSparqlQuery(query.query) }}>\n            <Paper elevation={2} className={classes.paperQuery} style={{ cursor: 'pointer', textAlign: 'center' }}>\n              {/* <Button variant=\"contained\" color=\"primary\" onClick={ () => { console.log('test!!') }}>\n                Run query\n              </Button> */}\n              <Typography variant=\"body1\" >\n                {query.summary}\n              </Typography>\n            </Paper>\n          </div>\n        {/* </Tooltip>; */}\n      })}\n\n      {/* Display a datatable with subject, predicate, object, graph retrieved */}\n      {Object.keys(state.get_all_graphs_results).length > 0 && (<>\n        <Typography variant=\"h5\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n          Graphs overview\n        </Typography>\n        <Paper elevation={4} className={classes.paperPadding}>\n          <table id='datatableAllGraphs' style={{ wordBreak: 'break-all' }}>\n            <thead>\n              <tr>\n                <th>Graphs</th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate Describe query results array */}\n              {state.get_all_graphs_results.map((row: any, key: number) => {\n                // return <Tooltip title={displayDescription(row.name, row.description)} key={key}>\n                return <tr key={key}>\n                    <td><LinkDescribe variant='body2' uri={row.graph.value}/></td>\n                  </tr>\n                {/* </Tooltip>; */}\n              })}\n            </tbody>\n          </table>\n        </Paper>\n        </>)}\n\n        {Object.keys(state.hcls_overview_results).length > 0 && (<>\n        <Typography variant=\"h5\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n          Endpoint <b>descriptive metadata</b> (<a href={Config.sparql_endpoint} className={classes.link}>HCLS</a>)\n        </Typography>\n        <Paper elevation={4} className={classes.paperPadding}>\n          <table id='datatableHclsOverview' style={{ wordBreak: 'break-all' }}>\n            <thead>\n              <tr>\n                <th>Graph</th>\n                <th>Date generated</th>\n                <th># of triples</th>\n                <th># of entities</th>\n                <th># of properties</th>\n                <th># of classes</th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate Describe query results array */}\n              {state.hcls_overview_results.map((row: any, key: number) => {\n                // return <Tooltip title={displayDescription(row.name, row.description)} key={key}>\n                return <tr key={key}>\n                    <td><LinkDescribe variant='body2' uri={row.graph.value}/></td>\n                    <td><Typography variant=\"body2\">{displayTableCell(row.dateGenerated)}</Typography></td>\n                    <td><Typography variant=\"body2\">{displayTableCell(row.statements)}</Typography></td>\n                    <td><Typography variant=\"body2\">{displayTableCell(row.entities)}</Typography></td>\n                    <td><Typography variant=\"body2\">{displayTableCell(row.properties)}</Typography></td>\n                    <td><Typography variant=\"body2\">{displayTableCell(row.classes)}</Typography></td>\n                  </tr>\n                {/* </Tooltip>; */}\n              })}\n            </tbody>\n          </table>\n        </Paper>\n        </>)}\n\n        <Paper elevation={4} className={classes.paperPadding}>\n          {state.isLoading && (\n            <CircularProgress className={classes.loadSpinner} />\n          )}\n\n          {state.graph_data.nodes.length > 0 && (<>\n            <Typography variant=\"h5\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n              <b>Entities-relations</b> metadata (<a href={Config.sparql_endpoint} className={classes.link}>HCLS</a>)\n            </Typography>\n            <Typography variant=\"body1\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n              <a href='https://perfectgraph-5c619.web.app/' className={classes.link} target='_blank' rel=\"noopener noreferrer\">\n                <b>Perfect Graph</b>\n              </a> visualization\n            </Typography>\n            <Paper elevation={4} className={classes.paperPadding}>\n              <ApplicationProvider>\n                <Graph\n                  style={{ width: '100%', height: 800 }}\n                  // @ts-ignore\n                  config={{ layout: Graph.Layouts.euler }}\n                  nodes={state.graph_data.nodes}\n                  edges={state.graph_data.edges}\n                  // nodes={[\n                  //   {\n                  //     id: '1',\n                  //     position: { x: 10, y: 10 },\n                  //     data: { city: 'Amsterdam', color: 'red' },\n                  //   },\n                  //   {\n                  //     id: '2',\n                  //     position: { x: 300, y: 10 },\n                  //     data: { city: 'Maastricht', color: 'blue' },\n                  //   },\n                  // ]}\n                  // edges={[\n                  //   { id: '51', source: '1', target: '2' },\n                  // ]}\n                  // drawLine={({ graphics, to, from }) => {\n                  //   drawLine({\n                  //     graphics,\n                  //     to,\n                  //     from,\n                  //     directed: true\n                  //     // type: 'bezier'\n                  //   })\n                  // }} \n                  renderNode={({ item: { data } }: any) => (\n                    <Graph.View\n                      style={{ width: 100, height: 100, backgroundColor: data.color }}\n                    >\n                      <Graph.Text style={{ fontSize: 16 }}>\n                        {data.uri.substring(data.uri.lastIndexOf('/') + 1)}\n                      </Graph.Text>\n                      {/* <LinkDescribe variant='body2' uri={data.uri}/> */}\n                    </Graph.View>\n                  )}\n                />\n              </ApplicationProvider>\n            </Paper>\n          </> )}\n\n          {state.graph_data.nodes.length > 0 && (<>\n            <Typography variant=\"body1\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n              <a href='https://github.com/plotly/react-cytoscapejs' className={classes.link} target='_blank' rel=\"noopener noreferrer\">\n                <b>Cytoscape JS</b>\n              </a> visualization\n            </Typography>\n            <Paper elevation={4} className={classes.paperPadding} style={{ height: '80vh', textAlign: 'left' }}>\n              <CytoscapeComponent elements={state.cytoscape_elements} layout={cytoscape_layout}\n                style={{ width: '100%', height: '100%',  }} \n                stylesheet={[\n                  {\n                    selector: 'edge',\n                    style: {\n                      'label': 'data(label)',\n                      'color': '#546e7a', // Grey\n                      'text-wrap': 'wrap',\n                      'font-size': '18px',\n                      'text-opacity': 0.9,\n                      'target-arrow-shape': 'triangle',\n                      // 'line-color': '#ccc',\n                      // 'target-arrow-color': '#ccc',\n                      // Control multi edge on 2 nodes:\n                      'curve-style': 'bezier',\n                      'control-point-step-size': 300,\n                    }\n                  },\n                  {\n                    selector: 'node',\n                    style: {\n                      'label': 'data(label)',\n                      'text-wrap': 'wrap',\n                      'font-size': '30px',\n                      // width: 15,\n                      // 'width': 'data(size)',\n                      // 'height': 'data(size)',\n                      // shape: 'rectangle'\n                    }\n                  }\n                ]}\n              />\n            </Paper>\n          </> )}\n\n          {Object.keys(state.entities_relations_overview_results).length > 0 && (<>\n            <Typography variant=\"body1\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n              <a href='https://datatables.net' className={classes.link} target='_blank' rel=\"noopener noreferrer\">\n                Datatable\n              </a>\n            </Typography>\n            <Paper elevation={4} className={classes.paperPadding}>\n              <table id='datatableEntitiesRelationOverview' style={{ wordBreak: 'break-all' }}>\n                <thead>\n                  <tr>\n                    <th>Graph</th>\n                    <th># of instance of subject</th>\n                    <th>Subject class</th>\n                    <th>Have relation</th>\n                    <th>With Object class</th>\n                    <th># of instance of object</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {/* Iterate Describe query results array */}\n                  {state.entities_relations_overview_results.map((row: any, key: number) => {\n                    return <tr key={key}>\n                        <td><LinkDescribe uri={row.graph.value} variant='body2'/></td>\n                        <td><Typography variant=\"body2\">{displayTableCell(row.subjectCount)}</Typography></td>\n                        <td><LinkDescribe uri={row.subject.value} variant='body2'/></td>\n                        <td><LinkDescribe uri={row.predicate.value} variant='body2'/></td>\n                        {row.object && (\n                          <td><LinkDescribe uri={row.object.value} variant='body2'/></td>\n                        )}\n                        {!row.object && (\n                          <td><Typography variant=\"body2\">Not found</Typography></td>\n                        )}\n                        <td><Typography variant=\"body2\">{displayTableCell(row.objectCount)}</Typography></td>\n                      </tr>\n                  })}\n                </tbody>\n              </table>\n            </Paper>\n          </>)}\n\n        </Paper>\n\n    </Container>\n  )\n\n}\n\nconst hcls_overview_query = `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX dctypes: <http://purl.org/dc/dcmitype/>\nPREFIX dcat: <http://www.w3.org/ns/dcat#>\nPREFIX void: <http://rdfs.org/ns/void#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nSELECT DISTINCT ?graph ?name ?description ?homepage ?dateGenerated ?statements ?entities ?properties ?classes\nWHERE {\n  GRAPH ?metadataGraph {\n    ?graph a void:Dataset .\n    OPTIONAL {\n      ?dataset a dctypes:Dataset ;\n        dct:title ?name ;\n        dct:description ?description ;\n        foaf:page ?homepage .\n      ?version dct:isVersionOf ?dataset ;\n        dcat:distribution ?graph .\n    }\n    OPTIONAL {\n      ?graph void:triples ?statements ;\n        void:entities ?entities ;\n        void:properties ?properties .\n    }\n    OPTIONAL {\n      ?graph dct:created ?dateGenerated .\n    }\n    OPTIONAL {\n      ?graph void:classPartition [\n        void:class rdfs:Class ;\n        void:distinctSubjects ?classes\n      ] .\n    }\n  }\n} ORDER BY DESC(?statements)`;\n\nconst entities_relations_query = `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX bl: <http://w3id.org/biolink/vocab/>\nPREFIX dctypes: <http://purl.org/dc/dcmitype/>\nPREFIX idot: <http://identifiers.org/idot/>\nPREFIX dcat: <http://www.w3.org/ns/dcat#>\nPREFIX void: <http://rdfs.org/ns/void#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX void-ext: <http://ldf.fi/void-ext#>\nSELECT DISTINCT ?metadataGraph ?graph ?subjectCount ?subject ?predicate ?objectCount ?object\nWHERE {\n  GRAPH ?metadataGraph {\n    # ?graph a void:Dataset .\n    ?graph void:propertyPartition [\n      void:property ?predicate ;\n      void:classPartition [\n        void:class ?subject ;\n        void:distinctSubjects ?subjectCount ;\n      ];\n      void-ext:objectClassPartition [\n      void:class ?object ;\n      void:distinctObjects ?objectCount ;\n      ]\n    ] .\n    }\n  } ORDER BY DESC(?subjectCount)`;","import React from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { makeStyles,  useTheme } from '@material-ui/core/styles';\nimport { Typography, Container, Paper, Grid, CircularProgress, Button } from \"@material-ui/core\";\nimport axios from 'axios';\n\n// From https://medium.com/@zbzzn/integrating-react-and-datatables-not-as-hard-as-advertised-f3364f395dfa\nimport 'datatables.net-dt/css/jquery.dataTables.min.css';\nconst $ = require('jquery');\n$.DataTable = require('datatables.net');\n\nimport { Graph } from \"perfect-graph\";\nimport { ApplicationProvider } from 'unitx-ui';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport Cytoscape from 'cytoscape';\nimport Cola from 'cytoscape-cola';\n\nimport LinkDescribe from \"../components/LinkDescribe\";\nimport Config from \"../components/Config\";\n// import Context from \"../components/Context\";\n\nCytoscape.use(Cola);\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    textAlign: 'center',\n  },\n  link: {\n    textDecoration: 'none',\n    textTransform: 'none',\n    color: theme.palette.primary.main,\n    '&:hover': {\n      color: theme.palette.secondary.main,\n      textDecoration: 'none',\n    },\n  },\n  fullWidth: {\n    width: '100%',\n  },\n  normalFont: {\n    fontSize: '14px',\n  },\n  smallerFont: {\n    fontSize: '12px',\n  },\n  alignLeft: {\n    textAlign: 'left'\n  },\n  paperPadding: {\n    padding: theme.spacing(2, 2),\n    // margin: theme.spacing(2, 2),\n  },\n  paperTitle: {\n    fontWeight: 300,\n    marginBottom: theme.spacing(1),\n  },\n  loadSpinner: {\n    padding: theme.spacing(10, 10)\n  },\n  datatable_text: {\n    wordBreak: 'break-word'\n  }\n}))\n\n\nexport default function Describe() {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const [state, setState] = React.useState({\n    describe_uri: '',\n    // describe_endpoint: '',\n    describe_results: [],\n    search_results: [],\n    graph_data: {nodes: [], edges: []},\n    cytoscape_elements: [],\n    isLoading: true,\n    requestError: false\n  });\n  const stateRef = React.useRef(state);\n\n  // Avoid conflict when async calls\n  const updateState = React.useCallback((update) => {\n    stateRef.current = {...stateRef.current, ...update};\n    setState(stateRef.current);\n  }, [setState]);\n\n  // const [context, setContext]: any = React.useContext(Context);\n\n  // useLocation hook to get URL params\n  let location = useLocation();\n\n  // TODO: dont work to use Ref for datatables.net\n  // const datatableRef = React.useRef(null);\n  \n  // Build SPARQL query to describe a URI\n  function getDescribeQuery(uri_to_describe: any) {\n    var describe_query;\n    const query_limit = 50;\n    if(uri_to_describe.startsWith('node')) {\n      // Case it is a blank node in Ontotext GraphDB\n      // TODO: improve it\n      uri_to_describe = \"_:\" + uri_to_describe\n      describe_query = `SELECT DISTINCT ?subject ?predicate ?object ?graph WHERE {\n          GRAPH ?graph {\n            ` + uri_to_describe + ` ?predicate ?object .\n          }\n        } LIMIT ` + query_limit\n    } else {\n      // Regular URI\n      uri_to_describe = \"<\" + uri_to_describe + \">\"\n      \n      // Define the query block that resolves graph URIs\n      // To returns only classes or all triples\n      var graphQuery = `SELECT * {\n        GRAPH ` + uri_to_describe + ` {\n          ?subject ?predicate ?object .\n          BIND(` + uri_to_describe + ` AS ?graph)\n        }\n      } LIMIT ` + query_limit\n      // if (this.context.triplestore.graph_uri_resolution === \"classes\") {\n      //   // TODO: Add DISTINCT ? Might slow the query down in some cases\n      //   graphQuery = `SELECT * {\n      //     GRAPH ` + uri_to_describe + ` {\n      //       [] a ?object .\n      //       BIND(\"dummy subject\" AS ?subject)\n      //       BIND(\"dummy predicate\" AS ?predicate)\n      //     }\n      //   } LIMIT 1000`\n      // }\n\n      describe_query = `SELECT DISTINCT ?subject ?predicate ?object ?graph WHERE {\n        {\n          SELECT * {\n            GRAPH ?graph {\n              ` + uri_to_describe + ` ?predicate ?object .\n              BIND(` + uri_to_describe + ` AS ?subject)\n            }\n          } LIMIT ` + query_limit + `\n        } UNION {\n          SELECT * {\n            GRAPH ?graph {\n              ?subject ?predicate ` + uri_to_describe + ` .\n              BIND(` + uri_to_describe + ` AS ?object)\n            }\n          } LIMIT ` + query_limit + `\n        } UNION {\n          SELECT * {\n            GRAPH ?graph {\n              ?subject ` + uri_to_describe + ` ?object .\n              BIND(` + uri_to_describe + ` AS ?predicate)\n            }\n          } LIMIT ` + query_limit + `\n        } UNION {\n          ` + graphQuery + `\n        }\n      }`\n    }\n    return encodeURIComponent(describe_query);\n  }\n\n  function getSearchQuery(text_to_search: string) {\n    let search_query = ''\n    const localStorageConfig = localStorage.getItem(\"intothegraphSettings\");\n    if (localStorageConfig) {\n      let configState: any = JSON.parse(localStorageConfig);\n      search_query = configState.search_query;\n    }\n    if (!search_query) {\n      // Default search query, if no query in localStorage\n      search_query = `SELECT ?foundUri ?foundLabel WHERE {\n        ?foundUri ?p ?foundLabel .\n        VALUES ?p {<http://www.w3.org/2000/01/rdf-schema#label> <https://w3id.org/biolink/vocab/name>} .\n        FILTER(isLiteral(?foundLabel))\n        FILTER contains(?foundLabel, \"$TEXT_TO_SEARCH\")\n        } LIMIT 5`.replace('$TEXT_TO_SEARCH', text_to_search)\n    }\n\n    // if (text_to_search === \"\") {\n    //   // If no text provided, we use a default search query to get interesting concepts \n    //   search_query = `SELECT ?foundUri ?foundLabel WHERE {\n    //     ?foundUri a ?type ; ?p ?foundLabel .\n    //     VALUES ?p {<http://www.w3.org/2000/01/rdf-schema#label> <https://w3id.org/biolink/vocab/name>} .\n    //     FILTER(isLiteral(?foundLabel))\n    //     FILTER(isIRI(?foundUri))\n    //     } LIMIT 20`\n\n    //   // A custom default query can be set in settings.json\n    //   // let defaultSearchQuery = Config.default_search_query;\n    //   // if (defaultSearchQuery) {\n    //   //   searchQuery = defaultSearchQuery;\n    //   // } else {\n    //   //   // If no custom default_query defined in settings.json\n    //   //   searchQuery = `SELECT ?foundUri ?foundLabel WHERE {\n    //   //     ?foundUri a ?type ; ?p ?foundLabel .\n    //   //     VALUES ?p {<http://www.w3.org/2000/01/rdf-schema#label> <https://w3id.org/biolink/vocab/name>} .\n    //   //     FILTER(isLiteral(?foundLabel))\n    //   //     FILTER(isIRI(?foundUri))\n    //   //     } LIMIT 20`\n    //   // }\n    // // } else if (search_query) {\n    // //   // If defined in settings.json\n    // //   // Results are provided through ?foundUri and ?foundLabel\n    // //   // Use $TEXT_TO_SEARCH as search variable to replace\n    // //   searchQuery = searchQuery.replace('$TEXT_TO_SEARCH', text_to_search)\n    // }\n    // console.log('search_query generated');\n    // console.log(search_query);\n    return encodeURIComponent(search_query);\n  }\n\n  function convertStringToNumber(string_to_convert: string) {\n    let hash = 0, i, chr;\n    for (i = 0; i < string_to_convert.length; i++) {\n      chr   = string_to_convert.charCodeAt(i);\n      hash  = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n  // Run on start of the page\n  React.useEffect(() => {\n    // Reset state\n    updateState({describe_results: {}})\n    updateState({search_results: {}})\n    updateState({isLoading: true})\n\n    // Get URL params \n    const params = new URLSearchParams(location.search + location.hash);\n\n    let describe_uri = params.get('uri');\n    let describe_endpoint = Config.sparql_endpoint;\n\n    // Get sparql_endpoint from cookie intothegraphSettings\n    if (!describe_endpoint) {\n      const localStorageConfig = localStorage.getItem(\"intothegraphSettings\");\n      if (localStorageConfig) {\n        let configState: any = JSON.parse(localStorageConfig);\n        describe_endpoint = configState.sparql_endpoint;\n      }\n    }\n\n    // console.log('context');\n    // console.log(context);\n    // if (!describe_endpoint && context.describe_endpoint) {\n    //   // Get endpoint from react Context\n    //   describe_endpoint = context.describe_endpoint;\n    // }\n\n    // TODO: handle default value somewhere else?\n    if (!describe_uri) {\n      describe_uri = 'https://identifiers.org/drugbank:DB00002';\n      // describe_uri = 'http://bio2rdf.org/clinicaltrials:NCT00209495';\n    }\n    if (!describe_endpoint) {\n      describe_endpoint = 'https://graphdb.dumontierlab.com/repositories/ncats-red-kg';\n      // describe_endpoint = 'https://bio2rdf.org/sparql';\n    }\n\n    updateState({describe_uri: describe_uri})\n    updateState({describe_endpoint: describe_endpoint})\n    // TODO: Context not propagating properly, using cookie localStorage instead\n    // setContext(describe_endpoint)\n\n    if(/^(?:node[0-9]+)|((https?|ftp):.*)$/.test(describe_uri)) {\n      // If URI provided\n      axios.get(describe_endpoint + `?query=` + getDescribeQuery(describe_uri))\n        .then(res => {\n          const sparql_results_array = res.data.results.bindings;\n          updateState({describe_results: sparql_results_array})\n          updateState({isLoading: false})\n\n          $('#datatableRef').DataTable({\n            \"autoWidth\": false\n          });\n\n          let graph_nodes: any = {}\n          let graph_edges: any = []\n          let cytoscape_elements: any = []\n          let node_count = 1;\n\n          // Prepare perfect graph data\n          sparql_results_array.forEach((result_row: any) => {\n            // Add subject node to hash if not present\n            if (!(result_row.subject.value in graph_nodes)) {\n              // If not already in array\n              graph_nodes[result_row.subject.value] = {\n                id: result_row.subject.value,\n                position: { x: node_count * 100, y: node_count * 400 },\n                data: { uri: result_row.subject.value, color: 'red' },\n              };\n              cytoscape_elements.push({ data: { id: result_row.subject.value, label: result_row.subject.value } })\n              node_count += 1;\n            }\n\n            // Add object node\n            if (!(result_row.object.value in graph_nodes)) {\n              // If not already in array\n              graph_nodes[result_row.object.value] = {\n                id: result_row.object.value,\n                position: { x: node_count * 80, y: node_count * 40 },\n                data: { uri: result_row.object.value, color: 'green' },\n              };\n              cytoscape_elements.push({ data: { id: result_row.object.value, label: result_row.object.value } })\n              node_count += 1;\n            }\n\n            // Add edge between the 2 nodes\n            const edge_id = result_row.subject.value + result_row.predicate.value + result_row.object.value;\n            graph_edges.push({\n              id: edge_id,\n              source: result_row.subject.value,\n              target: result_row.object.value,\n              data: { uri: result_row.predicate.value, color: 'green' }\n            });\n            cytoscape_elements.push({ data: { \n              source: result_row.subject.value, \n              target: result_row.object.value, \n              label: result_row.predicate.value \n            } })\n          })\n\n        const graph_nodes_array = Object.keys(graph_nodes).map(function(node_id){\n          return graph_nodes[node_id];\n        });\n\n        console.log('Graph nodes and edges data');\n        console.log(graph_nodes_array);\n        console.log(graph_edges);\n        updateState({\n          // graph_data: { nodes: graph_nodes_array, edges: graph_edges },\n          cytoscape_elements: cytoscape_elements\n        })\n      })\n\n    } else {\n      // Full text search if not URI\n      axios.get(describe_endpoint + `?query=` + getSearchQuery(describe_uri))\n        .then(res => {\n          const search_results_array = res.data.results.bindings;\n          updateState({search_results: search_results_array})\n          updateState({isLoading: false})\n          // let searchResults = [];\n          // sparqlResultArray.forEach((sparqlResultRow) => {\n          //   searchResults.push({\n          //     foundUri: sparqlResultRow.foundUri.value , \n          //     foundLabel: sparqlResultRow.foundLabel.value\n          //   })\n          // })\n        })\n        .catch(error => {\n          console.log(error)\n          updateState({ requestError: true });\n          updateState({ isLoading: false });\n        })\n    }\n\n  }, [location])\n\n  // Change Cytoscape layout: https://js.cytoscape.org/#layouts\n  const cytoscape_layout = {\n    name: 'cola',\n    nodeSpacing: 170,\n    // edgeLengthVal: 1000,\n    animate: false,\n    randomize: false,\n    maxSimulationTime: 1500\n  }\n  // const cytoscape_layout = { \n  //   name: 'concentric',\n  //   minNodeSpacing: 20\n  // };\n  // const cytoscape_layout = { name: 'breadthfirst' };\n  // const cytoscape_layout = {\n  //   name: 'cose',\n  //   animate: 'end',\n  //   fit: true,\n  //   componentSpacing: 1000,\n  //   nodeOverlap: 10,\n  //   nodeRepulsion: function( node: any ){ return 4092; },\n  //   idealEdgeLength: function( edge: any ){ return 300; },\n  // };\n\n  return(\n    <Container className='mainContainer'>\n      <Typography variant=\"h5\" className={classes.margin}>\n        {state.describe_uri}\n      </Typography>\n\n      {state.isLoading && (\n        <CircularProgress className={classes.loadSpinner} />\n      )}\n\n      {/* Display a datatable with subject, predicate, object, graph retrieved */}\n      {state.describe_results.length > 0 && ( \n        // <table table=\"true\" ref={datatableRef}>\n        <Paper elevation={4} className={classes.paperPadding}>\n          <table id='datatableRef' style={{ wordBreak: 'break-all' }}>\n            <thead>\n              <tr>\n                <th>Subject</th>\n                <th>Predicate</th>\n                <th>Object</th>\n                <th>Graph</th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* Iterate Describe query results array */}\n              {state.describe_results.map((row: any, key: number) => {\n                // return <Tooltip title={displayDescription(row.name, row.description)} key={key}>\n                return <tr key={key}>\n                    {/* <td><LinkDescribe uri={row.graph.value} variant='body2'/></td> */}\n                    <td><LinkDescribe variant='body2' uri={row.subject.value}/></td>\n                    <td><LinkDescribe variant='body2' uri={row.predicate.value}/></td>\n                    <td><LinkDescribe variant='body2' uri={row.object.value}/></td>\n                    <td><LinkDescribe variant='body2' uri={row.graph.value}/></td>\n                  </tr>\n                {/* </Tooltip>; */}\n              })}\n            </tbody>\n          </table>\n        </Paper>\n      )}\n\n      {/* Show results of full text search query */}\n      {state.search_results.length > 0 &&\n        <Paper elevation={4} className={classes.paperPadding}>\n            {state.search_results.map(function(searchResult: any, key: number){\n              return <Grid container spacing={2} alignItems=\"center\" key={key}>\n                <Grid item xs={6}>\n                  <Paper className={classes.paperPadding}>\n                    <LinkDescribe variant='body2' uri={searchResult.foundUri.value}/>\n                  </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"body2\">{searchResult.foundLabel.value}</Typography>\n                </Grid>\n              </Grid>\n            })}\n        </Paper>\n      }\n\n      {/* Show error message (if request fails) */}\n      {state.requestError && (\n        <Paper elevation={2} className={classes.paperPadding}>\n          <Typography variant=\"body2\">\n            The request to the SPARQL endpoint failed, try to <a href=\"\" className={classes.link}>reload the page ♻️</a><br/>\n            Or&nbsp;<a href=\"https://addons.mozilla.org/fr/firefox/addon/cors-everywhere/\" className={classes.link} target='_blank' rel=\"noopener noreferrer\">\n              enable CORS requests</a> in your browser.\n          </Typography>\n        </Paper>\n      )}\n\n      {/* No results for URI resolution */}\n      {!state.requestError && !state.isLoading && state.describe_results.length < 1 && !state.search_results.length && (\n        <Paper elevation={2} className={classes.paperPadding}>\n          <Typography variant=\"body2\">\n            We could not find a match for your URI in the SPARQL endpoint.\n          </Typography>\n        </Paper>\n      )}\n\n      {/* No results for Search */}\n      {!state.requestError && !state.isLoading && state.search_results.length < 1 && !state.describe_results.length && (\n        <Paper elevation={2} className={classes.paperPadding}>\n          <Typography variant=\"body2\">\n            We could not find a match for your search in the SPARQL endpoint.\n          </Typography>\n        </Paper>\n      )}\n\n      {state.graph_data.nodes.length > 0 && (<>\n        <Typography variant=\"h5\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n          {/* <a href='https://perfectgraph-5c619.web.app/' className={classes.link} > */}\n          Perfect Graph visualization\n          {/* </a> */}\n        </Typography>\n        <Paper elevation={4} className={classes.paperPadding}>\n          <ApplicationProvider>\n            <Graph\n              style={{ width: '100%', height: 800 }}\n              // config={{ layout: Graph.Layouts.euler }}\n              nodes={state.graph_data.nodes}\n              edges={state.graph_data.edges}\n              // nodes={[\n              //   {\n              //     id: '1',\n              //     position: { x: 10, y: 10 },\n              //     data: { city: 'Amsterdam', color: 'red' },\n              //   },\n              //   {\n              //     id: '2',\n              //     position: { x: 300, y: 10 },\n              //     data: { city: 'Maastricht', color: 'blue' },\n              //   },\n              // ]}\n              // edges={[\n              //   { id: '51', source: '1', target: '2' },\n              // ]}\n              // drawLine={({ graphics, to, from }) => {\n              //   drawLine({\n              //     graphics,\n              //     to,\n              //     from,\n              //     directed: true\n              //     // type: 'bezier'\n              //   })\n              // }} \n              renderNode={({ item: { data } }: any) => (\n                <Graph.View\n                  style={{ width: 100, height: 100, backgroundColor: data.color }}\n                >\n                  <Graph.Text style={{ fontSize: 16 }}>\n                    {data.uri}\n                  </Graph.Text>\n                  {/* <LinkDescribe variant='body2' uri={data.uri}/> */}\n                </Graph.View>\n              )}\n            />\n          </ApplicationProvider>\n        </Paper>\n      </> )}\n\n      {state.cytoscape_elements.length > 0 && (<>\n        <Typography variant=\"h5\" className={classes.margin} style={{ marginTop: theme.spacing(6) }}>\n          Cytoscape JS visualization\n        </Typography>\n        <Paper elevation={4} className={classes.paperPadding} style={{ height: '100vh', textAlign: 'left' }}>\n          <CytoscapeComponent elements={state.cytoscape_elements} layout={cytoscape_layout}\n            style={{ width: '100%', height: '100%' }} \n            stylesheet={[\n              {\n                selector: 'edge',\n                style: {\n                  'label': 'data(label)',\n                  'color': '#546e7a', // Grey\n                  'text-wrap': 'wrap',\n                  'font-size': '18px',\n                  'text-opacity': 0.9,\n                  'target-arrow-shape': 'triangle',\n                  // 'line-color': '#ccc',\n                  // 'target-arrow-color': '#ccc',\n                  // Control multi edge on 2 nodes:\n                  'curve-style': 'bezier',\n                  'control-point-step-size': 300,\n                  // width: 15\n                }\n              },\n              {\n                selector: 'node',\n                style: {\n                  'label': 'data(label)',\n                  'text-wrap': 'wrap',\n                  'font-size': '30px',\n                  // width: 20,\n                  // height: 20,\n                  // shape: 'rectangle'\n                }\n              }\n            ]}\n          />\n        </Paper>\n      </> )}\n\n \n    \n    </Container>\n  )\n}","import React from \"react\";\nimport { View } from \"react-native\";\nimport { Router, Route } from \"./react-router\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport './App.css';\nimport NavBar from \"./src/components/NavBar\";\nimport Footer from \"./src/components/Footer\";\nimport Context from \"./src/components/Context\";\nimport Homepage from \"./src/pages/homepage\";\nimport Describe from \"./src/pages/describe\";\n\n// import blue from '@material-ui/core/colors/blue';\n\n\nexport default function App() {\n\n  const [context, setContext] = React.useState('https://bio2rdf.org/sparql');\n\n  // Change theme color and typography here\n  const theme = createMuiTheme({\n    palette: {\n      // Blue and orange\n      // Bio2RDF blue: 174E74 and orange: E77817\n      primary: { light: '#63a4ff', main: '#2196f3', dark: '#004ba0' },\n      secondary: { light: '#ffa040', main: '#ff6f00', dark: '#c43e00' },\n      // primary: { light: blue[50], main: blue[700], dark: blue[900] },\n      // default: { light: '#fafafa', main: '#eceff1', dark: grey[600] }\n    },\n    typography: {\n      \"fontFamily\": \"\\\"Open Sans\\\", \\\"Roboto\\\", \\\"Arial\\\"\",\n      \"fontWeightLight\": 300,\n      \"fontWeightRegular\": 400,\n      \"fontWeightMedium\": 500\n      // \"fontSize\": 13\n    },\n  });\n\n  return (\n    <Context.Provider value={[context, setContext]}>\n      <MuiThemeProvider theme={theme}>\n        <Router basename=\"/bio2rdf-website/\">\n          <View style={{height: '100%', backgroundColor: '#eceff1'}}>\n            <NavBar />\n\n            <Route exact path=\"/\" component={Homepage} />\n            <Route path=\"/describe\" component={Describe} />\n\n            <Footer />\n          </View>\n        </Router>\n      </MuiThemeProvider>\n    </Context.Provider>\n  );\n}\n\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/bio2rdf-website/expo-service-worker.js', { scope: '/bio2rdf-website/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","var api = require(\"!./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!./node_modules/css-loader/dist/cjs.js!./App.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.push([module.id, \"@import url(https://fonts.googleapis.com/css?family=Open+Sans);\"]);\n// Module\nexports.push([module.id, \".flexGrow {\\n  flex-grow: 1; \\n}\\n\\n.mainContainer {\\n  margin-top: 30px;\\n  margin-bottom: 20px;\\n  text-align: center;\\n}\\n\\n/* a {\\n  text-transform: none;\\n  text-decoration: none\\n} */\\n\\npre, code {\\n  font-family: monospace, monospace;\\n  border-radius: 6px;\\n  padding: 2px;\\n  color: white;\\n  background-color: #455a64;\\n  /* background-color: #1976d2; */\\n}\\n  \\n/* @import url(\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\");\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  text-align: center; } */\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"sourceRoot":""}